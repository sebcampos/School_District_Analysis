Notes on Pandas Module

-Using the df.count() function displays all the columns and their counts,

-Using the df.isnull() function returns boolean values based on the dataframe
 can also be used or applied on sepcific rows or Series objects.
 because .isnull() returns boolen we can append the .sum() function after
 the () so that we return a Series of columns with the True Values added up

-Using df.notnull() is identical in nature to the .isnull() but you guessed 
 it, returns True booleans if the value is not NaN

-Available options for handling missing data 
 -Nothing
 -Drop the row with the missing value
  -df.dropna() function drops the rows containing any "NaN" value  
 -Fill the row with th missing value
  -df.fillna(x)

-Collecting the data types of a dataframe is done with the function
 df.dtypes, returns a series with the columns as the id and the dtype
 as the values. This function can also be applied to a Series

-Using the df.series.tolist() function is a great way to iterate over or 
 edit a list without affecting the original data frame

-using the python set() function we can draw all the uniques values from 
 the list ie lst=[a,a,b,c] -- set(lst) = [a,b,c]

-using the .strip('abc') function would remove 'a' 'b' 'c' from a string
 makes sure to check if dtype is string and not object

-df.column.sum() returns a sums of all passed integer values in the columns
 skipping over NaN and the like
 df.column.count counts all existing values, and returns the count

-df.column.unique() returns a numpy array with only the unique values in 
 that column

-df.series.map() function map({"current_value_1" : "new_value_1",
  "current_value_2" : "new_value_2", etc}) takes in a dicitonary and 
  converts keys or the old values to the new values

-.format() fucntion = "{value:format specification}".format(value)

-.map("${:,.2f}".format) will map all values to two decimal places,
 add a "," after 3 digits as well as a dollr sign at the begining
 ie 65000.345324134 becomes $6,500.34

- Reorder the columns in the order you want them to appear. 
  new_column_order = ["Total Schools", "Total Students", 
  "Total Budget","Average Math Score", "Average Reading Score", 
  "% Passing Math", "% Passing Reading", "% Overall Passing"]
   Assign district summary df the new column order.
   district_summary_df = district_summary_df[new_column_order]

-df.set_index(["Column Name"])["column_2"]
 sets the index of a series to compare two series

-df.column.value_counts()  returns a series with the number of times the Value
 appeared in the designated column  

-Operations like series= series/series work because both are series with 
 integers and the same indexes

-groupby section 4.8.4

